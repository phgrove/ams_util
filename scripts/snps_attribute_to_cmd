#!/usr/bin/env perl

#################################################################################################
## 
## MIT No Attribution
##
## Permission is hereby granted, free of charge, to any person obtaining a copy of this
## software and associated documentation files (the "Software"), to deal in the Software
## without restriction, including without limitation the rights to use, copy, modify,
## merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
## permit persons to whom the Software is furnished to do so.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
## INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
## PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
## HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
## OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
## SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
## 
#################################################################################################

my $cmd_called          = $0." ".join(" ", @ARGV);

#Script get 3 arguments
my $in_file = $ARGV[0]; #Input warning log file
my $out_file= $ARGV[1]; #Output command file
my $err_file= $ARGV[2]; #Output error file for any errors

#Line number count
my $line_number = 0;

#Hash of commands created already so duplicates are not made.
my %ams_cmds;
my $ams_cmd;

#fix file type issues
`dos2unix -q $in_file`;

#Open files
open(IN_FILE, "<", $in_file);
open(OUT_FILE,">", $out_file);
open(ERR_FILE,">", $err_file);

#$/="*)";
while(<IN_FILE>){
    
    $line_number = $line_number + 1;
    
    if($_ =~ /^(\d+):/) {
        my $id          = $1;            
        
        #Set seperator as *) and slurp up to that point into a string
        local $/ = "*)";
        my $line = <IN_FILE>;
        
        #count lines read in
        my $count =  ($line =~ tr/\n//);        

        #Remove begining spaces and new lines        
        $line =~ s/^\s+//;
        $line =~ s/\n//gms;

        #check the line matches what we expect.
        if($line =~ /.*(WARNING:.*)(Attribute\w?:.*)/) {
 
            my $warn        = $1;
            my $attrib      = $2;
  
            #Get details from $warn
            if($warn =~ / file (\S+).* on instance (.*?) in module (.*?) from library (.*?)\./){
                my $file      = $1;
                my $inst      = $2;
                my $mod       = $3;
                my $lib       = $4;
                my $construct = "instance";
 
                if($attrib =~ /integer cds_net_set.*?;(.*);.*?\*\)/){
                    my $netsets = $1;
                    $netsets =~ s/integer//g;
                    foreach my $t (split(";",$netsets)) {
                        $t =~ /\s+(.*)\s+=\s(.*)/;
                        my $key     = $1;
                        my $value   = $2;
                        $key    =~ s/\"//gms;
                        $value  =~ s/\"//gms;                                                                   
                        print OUT_FILE "//Entry      : $id (Line $line_number)\n";
                        print OUT_FILE "//File       : $file\n";
                        print OUT_FILE "//Key        : $key\n";
                        print OUT_FILE "//Module type: module\n";
                        print OUT_FILE "//Construct  : $construct\n";
                        $ams_cmd = "ams_cdef_inst -lib $lib -cell $mod -inst { $inst } -supply { $key => $value };";
                        #Keep track to work around tool issue printing line more than oens
                        if(exists $ams_cmd{$ams_cmd} ) {
                            print OUT_FILE "//$ams_cmd\n";
                        } else {
                            $ams_cmd{$ams_cmd} = undef;
                            print OUT_FILE "$ams_cmd\n";
                        }
                        print OUT_FILE "\n";
                    }
                } elsif ($attrib =~ /integer passed_mfactor\s+=\s+(.*);/) {
                    my $mfactor = $1;
                    $mfactor =~ s/\"//gms;
                    print OUT_FILE "//Entry      : $id (Line $line_number)\n";
                    print OUT_FILE "//File       : $file\n";
                    print OUT_FILE "//Key        : passed_mfactor\n";
                    print OUT_FILE "//Module type: module\n";
                    print OUT_FILE "//Construct  : $construct\n";
                    $ams_cmd = "ams_mfactor -lib $lib -cell $mod -local_inst $inst -param_override $mfactor;";
                    if(exists $ams_cmd{$ams_cmd} ) {
                        print OUT_FILE "//$ams_cmd\n";
                    } else {
                        $ams_cmd{$ams_cmd} = undef;
                        print OUT_FILE "$ams_cmd\n";
                    }                                        
                    print OUT_FILE "\n";
                } else {
                    print ERR_FILE "Error on instance attribute $id (Line $line_number)\n"; die;
                }
 
            } elsif($warn =~ / file (\S+).* on node (.*?) in module (.*?) from library (.*?)\./) {
                my $file      = $1;
                my $node      = $2;
                my $mod       = $3;
                my $lib       = $4;
                my $construct = "node";
                $attrib =~ /.* \(\*\s*(.*)\s*\*\)/;
                $attrib = $1;
 
                #Is it inh_conn_prop_name/inh_conn_def_value or supplySensitivity/groundSensitivity
                if($attrib =~ /integer\s+inh_conn_prop_name\s+=\s+(.*);\s+integer\s+inh_conn_def_value\s+=\s+(.*);/){
                    my $name    = $1;
                    my $default = $2;
                    $name    =~ s/\"//gms;
                    $default =~ s/\"//gms;
                    #Escape paths
                    $default = join '.', map { $_ =~ /^[a-zA-Z_]+[a-zA-Z_0-9]*$/ ? "$_":"\\$_" } split('\.',$default);
                    print OUT_FILE "//Entry      : $id (Line $line_number)\n";
                    print OUT_FILE "//File       : $file\n";
                    print OUT_FILE "//Key        : inh_conn_prop_name\n";
                    print OUT_FILE "//Module type: module\n";
                    print OUT_FILE "//Construct  : $construct\n";
                    $ams_cmd = "ams_cdef_net -lib $lib -cell $mod -net { $node } -default_supply { $name => $default };";
                    if(exists $ams_cmd{$ams_cmd} ) {
                        print OUT_FILE "//$ams_cmd\n";
                    } else {
                        $ams_cmd{$ams_cmd} = undef;
                        print OUT_FILE "$ams_cmd\n";
                    }
                    print OUT_FILE "\n";
                } elsif ($attrib =~ /integer\s+supplySensitivity\s+=\s+(.*);\s+integer\s+groundSensitivity\s+=\s+(.*);/){
                    my $supply = $1;
                    my $gnd    = $2;
                    $supply =~ s/\"//gms;
                    $gnd    =~ s/\"//gms;
                    print OUT_FILE "//Entry      : $id ($line_number)\n";
                    print OUT_FILE "//File       : $file\n";
                    print OUT_FILE "//Key        : supplySensitivity\n";
                    print OUT_FILE "//Module type: module\n";
                    print OUT_FILE "//Construct  : $construct\n";
                    $ams_cmd = "ams_supply -lib $lib -cell $mod -digital_port { $node } -supply { port_power => $supply, port_ground => $gnd };";
                    if(exists $ams_cmd{$ams_cmd} ) {
                        print OUT_FILE "//$ams_cmd\n";
                    } else {
                        $ams_cmd{$ams_cmd} = undef;
                        print OUT_FILE "$ams_cmd\n";
                    }
                    print OUT_FILE "\n";
                } else {
                    print ERR_FILE "Error on node attribute (module) $id (Line $line_number)\n"; die;
                }
                    
            } elsif($warn =~ / file (\S+).* on node (.*?) in connectmodule (.*?) from library (.*?)\./){
                my $file      = $1;
                my $node      = $2;
                my $mod       = $3;
                my $lib       = $4;
                my $construct = "node";
                $attrib =~ /.* \(\*\s*(.*)\s*\*\)/;
                $attrib = $1;
 
                #Is it inh_conn_prop_name/inh_conn_def_value or supplySensitivity/groundSensitivity
                if($attrib =~ /integer\s+inh_conn_prop_name\s+=\s+(.*);\s+integer\s+inh_conn_def_value\s+=\s+(.*);/){
                    my $name    = $1;
                    my $default = $2;
                    $name    =~ s/\"//gms;
                    $default =~ s/\"//gms;
                    #Escape paths
                    $default = join '.', map { $_ =~ /^[a-zA-Z_]+[a-zA-Z_0-9]*$/ ? "$_":"\\$_" } split('\.',$default);
                    print OUT_FILE "//Entry      : $id (Line $line_number)\n";
                    print OUT_FILE "//File       : $file\n";
                    print OUT_FILE "//Key        : inh_conn_prop_name\n";
                    print OUT_FILE "//Module type: module\n";
                    print OUT_FILE "//Construct  : $construct\n";
                    $ams_cmd = "ams_cdef_net_cm -lib $lib -cell $mod -cm_net { $node } -default_supply { ".($name =~ /^\w*vdd$/ ? "snps_cm_power":"snps_cm_ground")." => $default } -inherited_supply { $name  => $default };";
                    if(exists $ams_cmd{$ams_cmd} ) {
                        print OUT_FILE "//$ams_cmd\n";
                    } else {
                        $ams_cmd{$ams_cmd} = undef;
                        #No longer reuired out as it defined in the main vcsAD.init rather than generated on the fly. Line written out as a comment only.                       
                        print OUT_FILE "//$ams_cmd\n";
                    }
                    print OUT_FILE "\n";
                } else {
                    print ERR_FILE "Error on node attribute (connect module) $id (Line $line_number)\n"; die;                
                }
            } else  {
                print ERR_FILE "Error on $line (Line $line_number)";    die;
            }
        } elsif( $line != "") {
            print ERR_FILE "Error on \"$line\" (Line $line_number)";    die;
        }
        
        $line_number = $line_number + $count; 
    }
    
}

#Close files.
close(IN_FILE);
close(OUT_FILE);
close(ERR_FILE);
